# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pr:
- master

pool:
  vmImage: 'macOS-10.13'

steps:

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'google-play-service-account-key.json'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'google-play-upload-key.jks'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'signing.gradle'

- script: 'mkdir Secure'
  displayName: Make Secure Directory
    
- script: 'touch Secure/google-play-service-account-key.json'
  displayName: Make empty google-play-service-account-key.json
  
- script: 'touch Secure/google-play-upload-key.jks'
  displayName: Make empty google-play-upload-key.jks
  
- script: 'echo -e signingConfigs{\\nrelease{\\n}\\n} > Secure/signing.gradle'
  displayName: Make empty signing.gradle

- script: echo -e 'ext{\ninstantVersionCode=$(Build.BuildId)*2-1\ninstalledVersionCode=$(Build.BuildId)*2\nversionNamePostfix=$(Build.BuildId)\ngooglePlayTrack="internal"\n}' > Secure/version.gradle
  displayName: Make version.gradle
  
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'testReleaseUnitTest'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml' 
